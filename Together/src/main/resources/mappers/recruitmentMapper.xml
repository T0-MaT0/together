<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="recruitmentMapper">
	
	<resultMap type="RecruitmentRoomDTO" id="recruitmentRoom_rm">
	    <id property="recruitmentNo" column="RECRUITMENT_NO" />
        <result property="maxParticipants" column="MAX_PARTICIPANTS"/>
	    <result property="recruitmentStatus" column="RECRUITMENT_STATUS"/>
	    <result property="recCreatedDate" column="REC_CREATED_DATE"/>
	    <result property="recEndDate" column="REC_END_DATE"/>
	    <result property="region" column="REGION"/>
	    <result property="productUrl" column="PRODUCT_URL"/>
	    <result property="qrCode" column="QR_CODE"/>
	    <result property="boardNo" column="BOARD_NO"/>
	    <result property="boardCode" column="BOARD_CD"/>
	    <result property="productName" column="PRODUCT_NAME"/>
	    <result property="productContent" column="PRODUCT_CONTENT"/>
	    
	    <result property="productPrice" column="PRODUCT_PRICE"/>
	    <result property="productCount" column="PRODUCT_COUNT"/>
	    <result property="deliveryFee" column="DELIVERY_FEE"/>
	    <result property="readCount" column="READ_COUNT"/>
	    <result property="categoryNo" column="CATEGORY_NO"/>
	
	    <result property="hostNo" column="hostNo"/>
	    <result property="hostName" column="hostName"/>
	    <result property="hostGrade" column="hostGrade"/>
	    <result property="hostProfile" column="hostProfile"/>
	    <result property="thumbnail" column="thumbnail"/>
	    <result property="currentParticipants" column="CURRENT_PARTICIPANTS"/>
	    <result property="memberNick" column="MEMBER_NICK"/>
	    <result property="memberAddr" column="MEMBER_ADDR"/>
	    <result property="point" column="POINT"/>
	    <result property="memberGrade" column="MEMBER_GRADE"/>
	    <result property="profileImg" column="PROFILE_IMG"/>
	    
	   
	</resultMap>
	
	
	
	<resultMap type="Review" id="review_rm">
	    <id property="reviewNo" column="REVIEW_NO"/>
	    <result property="reviewContent" column="REVIEW_CONTENT"/>
	    <result property="reviewStar" column="REVIEW_STAR"/>
	    <result property="reviewCreatedDate" column="REVIEW_CREATED_DATE"/>
	    <result property="reviewUpdateDate" column="REVIEW_UPDATE_DATE"/>
	    <result property="reviewDelFleg" column="REVIEW_DEL_FL"/>
	    <result property="reviewType" column="REVIEW_TYPE"/>
	    <result property="reviewTypeNo" column="REVIEW_TYPE_NO"/>
	    <result property="memberNo" column="MEMBER_NO"/>
	    <result property="boardTitle" column="BOARD_TITLE"/>
	    <result property="boardNo" column="BOARD_NO"/>
	</resultMap>
	

		

	<resultMap type="RecruitmentRoomDetailDTO" id="recruitmentRoomDetail_rm">
	    <id property="recruitmentNo" column="RECRUITMENT_NO" />
        <result property="maxParticipants" column="MAX_PARTICIPANTS"/>
	    <result property="recruitmentStatus" column="RECRUITMENT_STATUS"/>
	    <result property="recCreatedDate" column="REC_CREATED_DATE"/>
	    <result property="recEndDate" column="REC_END_DATE"/>
	    <result property="region" column="REGION"/>
	    <result property="productUrl" column="PRODUCT_URL"/>
	    <result property="qrCode" column="QR_CODE"/>
	    <result property="boardNo" column="BOARD_NO"/>
	    <result property="boardCode" column="BOARD_CD"/>
	    <result property="productName" column="PRODUCT_NAME"/>
	    <result property="productContent" column="PRODUCT_CONTENT"/>
	    
	    <result property="productPrice" column="PRODUCT_PRICE"/>
	    <result property="productCount" column="PRODUCT_COUNT"/>
	    <result property="deliveryFee" column="DELIVERY_FEE"/>
	    <result property="readCount" column="READ_COUNT"/>
	    <result property="categoryNo" column="CATEGORY_NO"/>
	
	    <result property="hostName" column="hostName"/>
	    <result property="hostGrade" column="hostGrade"/>
	    <result property="hostProfile" column="hostProfile"/>
	    <result property="thumbnail" column="thumbnail"/>
	    <result property="currentParticipants" column="CURRENT_PARTICIPANTS"/>
	    <result property="memberNick" column="MEMBER_NICK"/>
	    <result property="memberGrade" column="MEMBER_GRADE"/>
	    
	    <result property="qrToken" column="QR_TOKEN"/>
	    <result property="qrImagePath" column="QR_IMAGE_PATH"/>
	    <result property="trackingNumber" column="TRACKING_NUMBER"/>
	    <result property="deliveryExpected" column="DELIVERY_EXPECTED"/>
	    <result property="memberReceiveDate" column="MEMBER_RECEIVE_DATE"/>
	    
	    
	    <collection property="imageList"
  				  select="selectImageList"
  				  column="BOARD_NO"
  				  javaType="java.util.ArrayList"
  				  ofType="Image2">
  	    </collection>
  	   
	    <collection property="commentList"
  				  select="selectCommentList"
  				  column="BOARD_NO"
  				  javaType="java.util.ArrayList"
  				  ofType="Reply">
  	    </collection>
	</resultMap>
	
	<resultMap type="Reply" id="reply_rm">
	    <id property="replyNo" column="REPLY_NO"/>
	    <result property="replyCreatedDate" column="REPLY_CREATED_DATE"/>
	    <result property="replyDelFlag" column="REPLY_DEL_FL"/>
	    <result property="replyContent" column="REPLY_CONTENT"/>
	    <result property="secretReplyStatus" column="SECRET_REPLY_STATUS"/>
	    <result property="memberNo" column="MEMBER_NO"/>
	    <result property="replyType" column="REPLY_TYPE"/>
	    <result property="replyTypeNo" column="REPLY_TYPE_NO"/>
	    <result property="parentNo" column="PARENT_REPLY_NO"/>
	    <result property="boardTitle" column="BOARD_TITLE"/>
	    <result property="boardNo" column="BOARD_NO"/>
	    <result property="replyCount" column="REPLY_COUNT"/>
	    <result property="profileImg" column="PROFILE_IMG"/>
	    <result property="memberNick" column="MEMBER_NICK"/>
	    
	</resultMap>
	
		<!-- Image resultMap -->
	<resultMap type="Image2" id="image_rm">
		<id property="imageNo" column="IMG_NO" />
		<result property="imagePath" column="IMG_PATH" />
		<result property="imageReName" column="IMG_RENAME" />
		<result property="imageOriginal" column="IMG_ORIGINAL" />
		<result property="imageLevel" column="IMG_LEVEL" />
		<result property="imageType" column="IMG_TYPE" />
		<result property="imageTypeNo" column="IMG_TYPE_NO" />
	</resultMap>
	
	 <!-- 개인 공동구매 모집방 목록 조회 (BOARD_CD = 1인 경우) -->
	<select id="selectRecruitmentList" resultMap="recruitmentRoom_rm">
	    SELECT 
		    r.RECRUITMENT_NO, 
		    r.MAX_PARTICIPANTS, 
		    r.RECRUITMENT_STATUS, 
		    r.REC_CREATED_DATE, 
		    r.REC_END_DATE, 
		    r.REGION, 
		    r.PRODUCT_URL, 
		    r.QR_CODE, 
		    r.BOARD_NO, 
		    bt.BOARD_CD,
		    b.BOARD_TITLE AS PRODUCT_NAME,   
		    p.PRODUCT_PRICE, 
		    p.PRODUCT_COUNT, 
		    p.DELIVERY_FEE, 
		    p.READ_COUNT, 
		    p.CATEGORY_NO,
		
		    -- 모집장 닉네임과 등급을 RECRUITMENT_ROOM에서 직접 가져옴
		    m.MEMBER_NO AS hostNo,
		    m.MEMBER_NICK AS hostName,
		    m.MEMBER_GRADE AS hostGrade,
		
		    (SELECT I.IMG_PATH || I.IMG_RENAME 
		     FROM IMG I	
		     WHERE I.IMG_TYPE_NO = B.BOARD_NO 
		     AND I.IMG_LEVEL = 0
		     AND I.IMG_TYPE = 2
		     FETCH FIRST 1 ROWS ONLY) AS thumbnail
		
		FROM RECRUITMENT_ROOM r
		JOIN BOARD b ON r.BOARD_NO = b.BOARD_NO  
		JOIN BOARD_TYPE bt ON b.BOARD_CD = bt.BOARD_CD  
		JOIN PRODUCT p ON b.BOARD_NO = p.BOARD_NO  
		JOIN MEMBER m ON r.MEMBER_NO = m.MEMBER_NO  -- 모집장 정보 가져오기
		WHERE bt.BOARD_CD = 1
		AND b.BOARD_DEL_FL = 'N' 
		ORDER BY r.REC_CREATED_DATE DESC
	</select>
	
	<!-- 조회수 높은 순 목록 조회 -->
	<select id="selectRecruitmentListByViewCount" resultMap="recruitmentRoom_rm">
	    SELECT 
		    r.RECRUITMENT_NO, 
		    r.MAX_PARTICIPANTS, 
		    r.RECRUITMENT_STATUS, 
		    r.REC_CREATED_DATE, 
		    r.REC_END_DATE, 
		    r.REGION, 
		    r.PRODUCT_URL, 
		    r.QR_CODE, 
		    r.BOARD_NO, 
		    bt.BOARD_CD,
		    b.BOARD_TITLE AS PRODUCT_NAME,   
		    p.PRODUCT_PRICE, 
		    p.PRODUCT_COUNT, 
		    p.DELIVERY_FEE, 
		    p.READ_COUNT, 
		    p.CATEGORY_NO,
		    b.BOARD_DEL_FL,  
		
		    -- 모집장 정보 RECRUITMENT_ROOM에서 가져오기
		    m.MEMBER_NO AS hostNo,
		    m.MEMBER_NICK AS hostName,
		    m.MEMBER_GRADE AS hostGrade,
		
		    (SELECT I.IMG_PATH || I.IMG_RENAME 
		     FROM IMG I
		     WHERE I.IMG_TYPE_NO = b.BOARD_NO 
		     AND I.IMG_LEVEL = 0
		     AND I.IMG_TYPE = 2
		     FETCH FIRST 1 ROWS ONLY) AS thumbnail
		
		FROM RECRUITMENT_ROOM r
		JOIN BOARD b ON r.BOARD_NO = b.BOARD_NO  
		JOIN BOARD_TYPE bt ON b.BOARD_CD = bt.BOARD_CD  
		JOIN PRODUCT p ON b.BOARD_NO = p.BOARD_NO  
		JOIN MEMBER m ON r.MEMBER_NO = m.MEMBER_NO  -- 모집장 정보 가져오기
		WHERE bt.BOARD_CD = 1
		AND b.BOARD_DEL_FL = 'N'  
		ORDER BY p.READ_COUNT DESC
	</select>
	
	<!-- 타입이 6,7,8인 모든 이미지 조회 -->
	<select id="selectAllBannerImages" resultMap="image_rm">
	    SELECT 
	        I.IMG_NO,
	        I.IMG_PATH,
	        I.IMG_RENAME,
	        I.IMG_ORIGINAL,
	        I.IMG_LEVEL,
	        I.IMG_TYPE,
	        I.IMG_TYPE_NO
	    FROM IMG I
	    WHERE I.IMG_TYPE IN (6,7,8)
	    ORDER BY I.IMG_LEVEL ASC
	</select>

    <!-- 현재 참가자 수 조회 -->
    <select id="countParticipants" resultType="int">
        SELECT SUM(PARTICIPATION_COUNT) 
		FROM RECRUITMENT_PARTICIPANT
		WHERE RECRUITMENT_NO = #{recruitmentNo}
    </select>

    <!-- 개인 공동구매 모집방 상세 조회 -->
    <select id="selectRecruitmentDetail" resultMap="recruitmentRoom_rm">
        SELECT * FROM RECRUITMENT_ROOM
        WHERE RECRUITMENT_NO = #{recruitmentNo}
    </select>
    
    <!-- 내가 참여중인 모집방 조회 -->
     <select id="selectMyRecruitmentList" resultMap="recruitmentRoom_rm">
	    SELECT 
	        RR.RECRUITMENT_NO, 
	        RR.RECRUITMENT_STATUS, 
	        RR.REC_CREATED_DATE, 
	        RR.REC_END_DATE, 
	        RP.JOIN_DATE, 
	        RP.CANCEL_DATE, 
	        RR.MAX_PARTICIPANTS, 
	        (SELECT COUNT(*) FROM RECRUITMENT_PARTICIPANT RP 
	         WHERE RP.RECRUITMENT_NO = RR.RECRUITMENT_NO) AS CURRENT_PARTICIPANTS, 
	        B.BOARD_TITLE AS PRODUCT_NAME, 
	        B.BOARD_NO,
	        P.PRODUCT_PRICE, 
	        P.PRODUCT_COUNT, 
	        M.MEMBER_NICK, 
	        M.MEMBER_ADDR, 
	        M.POINT, 
	        M.MEMBER_GRADE, 
	        NVL(M.PROFILE_IMG, '/resources/images/mypage/관리자 프로필.webp') AS HOST_PROFILE 
	    FROM RECRUITMENT_ROOM RR
	    JOIN BOARD B ON RR.BOARD_NO = B.BOARD_NO
	    JOIN BOARD_TYPE BT ON B.BOARD_CD = BT.BOARD_CD 
	    JOIN PRODUCT P ON B.BOARD_NO = P.BOARD_NO
	    JOIN MEMBER M ON RR.MEMBER_NO = M.MEMBER_NO
	    LEFT JOIN RECRUITMENT_PARTICIPANT RP 
	        ON RR.RECRUITMENT_NO = RP.RECRUITMENT_NO AND RP.MEMBER_NO = #{member_no}
	    WHERE BT.BOARD_CD = 1 
	    AND B.BOARD_DEL_FL = 'N'
	    AND (RR.MEMBER_NO = #{member_no} OR RP.MEMBER_NO IS NOT NULL)
	
	    <choose>
	        <when test="key == 'completed'">
	            AND RR.RECRUITMENT_STATUS = '완료'  
	        </when>
	
	        <when test="key == 'myRecruitment'">
	            AND RR.RECRUITMENT_STATUS IN ('진행', '마감')  
	        </when>
	    </choose>
	
	    ORDER BY RR.RECRUITMENT_NO DESC
	</select>
	
	<!-- 내가 작성한 댓글 조회 -->
	<select id="selectMyRecruitmentComments" resultMap="reply_rm">
	    SELECT 
	        R.REPLY_NO, 
	        TO_CHAR(R.REPLY_CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS REPLY_CREATED_DATE, 
	        R.REPLY_DEL_FL, 
	        R.REPLY_CONTENT, 
	        R.SECRET_REPLY_STATUS, 
	        R.MEMBER_NO, 
	        R.REPLY_TYPE, 
	        R.REPLY_TYPE_NO, 
	        R.PARENT_REPLY_NO, 
	        B.BOARD_TITLE, 
	        B.BOARD_NO,
	        (SELECT COUNT(*) 
		     FROM REPLY R2 
		     WHERE R2.PARENT_REPLY_NO = R.REPLY_NO 
		     AND R2.REPLY_DEL_FL = 'N') AS REPLY_COUNT 
	    FROM REPLY R
	    JOIN BOARD B ON R.REPLY_TYPE_NO = B.BOARD_NO
	    JOIN BOARD_TYPE BT ON B.BOARD_CD = BT.BOARD_CD
	    WHERE R.MEMBER_NO = #{member_no} 
	    AND R.REPLY_TYPE = 1  
	    AND B.BOARD_CD = 1  
	    AND R.REPLY_DEL_FL = 'N'  
	    ORDER BY R.REPLY_CREATE_DATE DESC
	</select>
	
	<!-- 내가 작성한 리뷰 조회 -->
	<select id="selectMyRecruitmentReviews" resultMap="review_rm">
	    SELECT 
	        R.REVIEW_NO, 
	        R.REVIEW_CONTENT, 
	        R.REVIEW_STAR, 
	        TO_CHAR(R.REVIEW_CREATED_DATE, 'YYYY-MM-DD HH24:MI:SS') AS REVIEW_CREATED_DATE, 
	        TO_CHAR(R.REVIEW_UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS REVIEW_UPDATE_DATE, 
	        R.REVIEW_DEL_FL, 
	        R.REVIEW_TYPE, 
	        R.REVIEW_TYPE_NO, 
	        R.MEMBER_NO, 
	        B.BOARD_TITLE, 
	        B.BOARD_NO
	    FROM REVIEW R
	    JOIN BOARD B ON R.REVIEW_TYPE_NO = B.BOARD_NO
	    JOIN BOARD_TYPE BT ON B.BOARD_CD = BT.BOARD_CD 
	    WHERE R.MEMBER_NO = #{member_no}  
	    AND R.REVIEW_TYPE = 1  
	    AND B.BOARD_CD = 1  
	    AND R.REVIEW_DEL_FL = 'N'  
	    ORDER BY R.REVIEW_CREATED_DATE DESC
	</select>
	
	<!-- 모집글 방장의 memberNo 조회 -->
	<select id="getHostMemberNo" parameterType="int" resultType="int">
	    SELECT MEMBER_NO
	    FROM RECRUITMENT_PARTICIPANT
	    WHERE RECRUITMENT_NO = (
	        SELECT RECRUITMENT_NO
	        FROM RECRUITMENT_ROOM
	        WHERE BOARD_NO = #{boardNo}
	    )
	    ORDER BY JOIN_DATE ASC
	    FETCH FIRST 1 ROWS ONLY 
	</select>
	
	<!-- 모집 상태 '마감'으로 업데이트 -->
	<update id="updateRecruitmentStatus">
	    UPDATE RECRUITMENT_ROOM 
	    SET RECRUITMENT_STATUS = '마감' 
	    WHERE BOARD_NO = #{boardNo}
	</update>
	
	<!-- 모집글 삭제 상태 변경 -->
	 <update id="deleteRecruitment">
        UPDATE BOARD 
        SET BOARD_DEL_FL = 'Y' 
        WHERE BOARD_NO = #{boardNo}
    </update>
    
    <!-- 선택된 댓글 삭제 -->
    <update id="updateReplyStatus">
	    UPDATE REPLY
	    SET REPLY_DEL_FL = 'Y'
	    WHERE REPLY_NO IN
	    <foreach item="replyNo" collection="replyNos" open="(" separator="," close=")">
	        #{replyNo}
	    </foreach>
	</update>
	
	<!-- 선택 리뷰 삭제 -->
	<update id="deleteReviews">
	    UPDATE REVIEW
	    SET REVIEW_DEL_FL = 'Y'
	    WHERE REVIEW_NO IN
	    <foreach collection="list" item="reviewNo" separator="," open="(" close=")">
	        #{reviewNo}
	    </foreach>
	</update>
	
	<!-- 특정 모집글의 이미지 조회 -->
	<select id="selectImageList" resultMap="image_rm">
	    SELECT 
	        IMG_NO, 
	        IMG_PATH, 
	        IMG_RENAME, 
	        IMG_ORIGINAL, 
	        IMG_LEVEL, 
	        IMG_TYPE, 
	        IMG_TYPE_NO
	    FROM IMG
	    WHERE IMG_TYPE = 2
	    AND IMG_TYPE_NO = #{boardNo}
	    ORDER BY IMG_LEVEL ASC
	</select>
	
	<!-- 특정 모집글의 댓글 조회 -->
	<select id="selectCommentList" resultMap="reply_rm">
	   SELECT 
		    r.REPLY_NO, 
		    r.REPLY_CREATE_DATE, 
		    r.REPLY_DEL_FL, 
		    r.REPLY_CONTENT, 
		    r.SECRET_REPLY_STATUS, 
		    r.MEMBER_NO, 
		    r.REPLY_TYPE, 
		    r.REPLY_TYPE_NO, 
		    r.PARENT_REPLY_NO,
		    m.PROFILE_IMG,
		    m.MEMBER_NICK
		FROM REPLY r
		JOIN MEMBER m ON r.MEMBER_NO = m.MEMBER_NO
		WHERE r.REPLY_TYPE = 1
		  AND r.REPLY_TYPE_NO = #{boardNo}
		  AND r.REPLY_DEL_FL = 'N'
		ORDER BY r.REPLY_CREATE_DATE ASC
	</select>
	
	<!-- 특정 모집글의 상세조회 -->
	<select id="selectRecruitmentRoomDetail" parameterType="map" resultMap="recruitmentRoomDetail_rm">
	    SELECT 
		    r.RECRUITMENT_NO, 
		    r.MAX_PARTICIPANTS, 
		    r.RECRUITMENT_STATUS, 
		    r.REC_CREATED_DATE, 
		    r.REC_END_DATE, 
		    r.REGION, 
		    r.PRODUCT_URL, 
		    r.QR_CODE,  
		    b.BOARD_NO,
		    b.BOARD_TITLE AS PRODUCT_NAME,   
		    b.BOARD_CONTENT,
			r.QR_TOKEN,             
		    r.QR_IMAGE_PATH,      
		    r.TRACKING_NUMBER,     
		    TO_CHAR(r.DELIVERY_EXPECTED, 'YYYY-MM-DD') AS DELIVERY_EXPECTED,
    		TO_CHAR(r.MEMBER_RECEIVE_DATE, 'YYYY-MM-DD') AS MEMBER_RECEIVE_DATE,   
		    p.PRODUCT_PRICE, 
		    p.PRODUCT_COUNT, 
		    p.DELIVERY_FEE, 
		    p.READ_COUNT, 
		    p.CATEGORY_NO, 
		
		    -- 모집장 정보 RECRUITMENT_ROOM에서 직접 가져오기
		    m.MEMBER_NICK AS hostName,
		    m.MEMBER_GRADE AS hostGrade
		
		FROM RECRUITMENT_ROOM r
		JOIN BOARD b ON r.BOARD_NO = b.BOARD_NO
		JOIN PRODUCT p ON b.BOARD_NO = p.BOARD_NO
		JOIN MEMBER m ON r.MEMBER_NO = m.MEMBER_NO -- 모집장 정보 가져오기
		
		WHERE r.RECRUITMENT_NO = #{recruitmentNo}
	</select>
	
	<!-- 모집글 상세 댓글 등록 -->
	<insert id="insertReply">
	    INSERT INTO REPLY (
	        REPLY_NO, REPLY_CREATE_DATE, REPLY_DEL_FL, 
	        REPLY_CONTENT, SECRET_REPLY_STATUS, MEMBER_NO, 
	        REPLY_TYPE, REPLY_TYPE_NO, PARENT_REPLY_NO
	    ) VALUES (
	        SEQ_REPLY_NO.NEXTVAL, SYSDATE, 'N', 
	        #{replyContent}, 'N', #{memberNo}, 
	        #{replyType}, #{boardNo}, NULL
	    )
	</insert>
	
	<!-- 댓글 삭제 -->
	<update id="deleteReply">
	    UPDATE REPLY
	    SET REPLY_DEL_FL = 'Y'
	    WHERE REPLY_NO = #{replyNo}
	    AND MEMBER_NO = #{memberNo}
	</update>
	
	<!-- 게시글 작성(board) -->
	<insert id="insertBoard">
    <!-- 게시글 번호(BOARD_NO) 시퀀스로 발급 -->
    <selectKey keyProperty="boardNo" resultType="int" order="BEFORE">
        SELECT SEQ_BOARD_NO.NEXTVAL FROM DUAL
    </selectKey>
    
	    INSERT INTO BOARD (
	        BOARD_NO, 
	        BOARD_TITLE, 
	        BOARD_CONTENT, 
	        MEMBER_NO, 
	        BOARD_CD, 
	        BOARD_DEL_FL, 
	        B_CREATE_DATE
	    ) VALUES (
	        #{boardNo},
	        #{boardTitle},
	        #{boardContent},
	        #{memberNo},
	        #{boardCd},
	        'N',        
	        SYSDATE     
	    )
	</insert>
	
	<!-- 게시글 작성(product) -->
	<insert id="insertProduct">
	    INSERT INTO PRODUCT (
	        BOARD_NO, 
	        PRODUCT_PRICE, 
	        PRODUCT_COUNT, 
	        DELIVERY_FEE, 
	        READ_COUNT, 
	        CATEGORY_NO
	    ) VALUES (
	        #{boardNo},
	        #{productPrice},
	        #{productCount},
	        #{deliveryFee},
	        0,              -- 초기 조회수 0
	        #{categoryNo}
	    )
	</insert>
	
	<!-- 게시글 작성(recruitment) -->
	<insert id="insertRoom">
    <!-- 모집방 번호(RECRUITMENT_NO) 시퀀스로 발급 -->
    <selectKey keyProperty="recruitmentNo" resultType="int" order="BEFORE">
        SELECT SEQ_RECRUITMENT_NO.NEXTVAL FROM DUAL
    </selectKey>
    
	    INSERT INTO RECRUITMENT_ROOM (
	        RECRUITMENT_NO, 
	        MAX_PARTICIPANTS, 
	        RECRUITMENT_STATUS, 
	        REC_CREATED_DATE, 
	        REC_END_DATE,
	        REGION,
	        PRODUCT_URL,
	        QR_CODE,
	        MEMBER_NO,
	        BOARD_NO
	    ) VALUES (
	        #{recruitmentNo},
	        #{maxParticipants},
	        '진행',          -- 기본값
	        SYSDATE,         -- 생성일
	        TO_DATE(#{recEndDate}, 'YYYY-MM-DD'),
	        #{region},
	        #{productUrl},
	        #{qrCode},
	        #{memberNo},     -- 방장(작성자)
	        #{boardNo}       -- FK(Board)
	    )
	</insert>
	
	<!-- 게시글 작성(participant) -->
	<insert id="insertParticipant">
	    INSERT INTO RECRUITMENT_PARTICIPANT (
	        MEMBER_NO,
	        JOIN_DATE,
	        CANCEL_DATE,
	        RECRUITMENT_NO,
	        PARTICIPATION_COUNT
	    ) VALUES (
	        #{memberNo},
	        SYSDATE,   -- 참가일
	        NULL,      -- 취소일 없음
	        #{recruitmentNo},
	        #{myQuantity}
	    )
	</insert>
	
	<!-- 게시글 작성(image)  -->
	<insert id="insertImageList">
	    INSERT INTO IMG (
	        IMG_NO,
	        IMG_RENAME,
	        IMG_PATH,
	        IMG_ORIGINAL,
	        IMG_LEVEL,
	        IMG_TYPE,
	        IMG_TYPE_NO
	    )
	    SELECT SEQ_IMG_NO.NEXTVAL, A.*
	    FROM (
	        <foreach collection="list" item="img" separator=" UNION ALL ">
	            SELECT 
	                #{img.imageReName} AS IMG_RENAME,
	                #{img.imagePath} AS IMG_PATH,
	                #{img.imageOriginal} AS IMG_ORIGINAL,
	                #{img.imageLevel} AS IMG_LEVEL,
	                #{img.imageType} AS IMG_TYPE,
	                #{img.imageTypeNo} AS IMG_TYPE_NO
	            FROM DUAL
	        </foreach>
	    ) A
	</insert>
	
	<!-- 내가 차지한 수량 조회 -->
	<select id="selectMyParticipationCount" resultType="int">
	    SELECT NVL(SUM(PARTICIPATION_COUNT), 0)
	    FROM RECRUITMENT_PARTICIPANT
	    WHERE RECRUITMENT_NO = #{recruitmentNo}
	      AND MEMBER_NO = #{memberNo}
	</select>
	
	<update id="updateBoard" parameterType="map">
        UPDATE BOARD
        SET 
            BOARD_TITLE = #{boardTitle},
            BOARD_CONTENT = #{boardContent},
            BOARD_CD = 1,
            B_UPDATE_DATE = SYSDATE  WHERE BOARD_NO = #{boardNo}
    </update>
    
    <update id="updateRecruitment" parameterType="map">
        UPDATE RECRUITMENT_ROOM
	    SET 
	        PRODUCT_URL = #{productUrl},
	        REC_END_DATE = TO_DATE(#{recEndDate}, 'YYYY-MM-DD'),
	        REGION = #{region},
	        MAX_PARTICIPANTS = #{maxParticipants}
	    WHERE RECRUITMENT_NO = #{recruitmentNo}
    </update>
    
    <update id="updateMyQuantity" parameterType="map">
        UPDATE RECRUITMENT_PARTICIPANT
        SET PARTICIPATION_COUNT = #{myQuantity}
        WHERE MEMBER_NO = #{memberNo}
        AND RECRUITMENT_NO = #{recruitmentNo}
    </update>
    
    <insert id="insertImage" parameterType="Image">
        INSERT INTO IMG (
            IMG_NO,
            IMG_RENAME,
            IMG_PATH,
            IMG_ORIGINAL,
            IMG_LEVEL,
            IMG_TYPE,
            IMG_TYPE_NO
        ) VALUES (
            SEQ_IMG_NO.NEXTVAL,
            #{imageReName},
            #{imagePath},
            #{imageOriginal},
            #{imageLevel},
            2, #{imageTypeNo} )
    </insert>

    <delete id="deleteImage" parameterType="int">
        DELETE FROM IMG
        WHERE IMG_NO = #{imageNo}
    </delete>
    
    <update id="updateProduct" parameterType="map">
	    UPDATE PRODUCT
	    SET 
	        PRODUCT_PRICE = #{productPrice}
	    WHERE BOARD_NO = #{boardNo}
	</update>
	
	<select id="selectImageInfo" parameterType="int" resultMap="image_rm">
	    SELECT IMG_PATH, IMG_RENAME 
	    FROM IMG 
	    WHERE IMG_NO = #{imgNo}
	</select>
	
	<!-- 최대 참가자 수 조회  -->
	<select id="selectMaxParticipants" parameterType="int" resultType="int">
	    SELECT MAX_PARTICIPANTS
	    FROM RECRUITMENT_ROOM
	    WHERE RECRUITMENT_NO = #{recruitmentNo}
	</select>
	
	<!-- 참여자 insert -->
	<insert id="insertRecruitmentParticipant" parameterType="map">
	    INSERT INTO RECRUITMENT_PARTICIPANT (
	        MEMBER_NO,
	        JOIN_DATE,
	        RECRUITMENT_NO,
	        PARTICIPATION_COUNT
	    ) VALUES (
	        #{memberNo},
	        SYSDATE,
	        #{recruitmentNo},
	        #{myQuantity}
	    )
	</insert>
	
	<!-- 모집상태 마감으로 변경 -->
	<update id="updateRecruitmentStatusToClosed" parameterType="int">
	    UPDATE RECRUITMENT_ROOM
	    SET RECRUITMENT_STATUS = '마감'
	    WHERE RECRUITMENT_NO = #{recruitmentNo}
	</update>
	
	<!-- 포인트 차감 -->
	<update id="updateMemberPoint" parameterType="map">
	    UPDATE MEMBER
	    SET POINT = POINT + #{pointChange}
	    WHERE MEMBER_NO = #{memberNo}
	</update>
	
	<!-- 포인트 사용 내역 -->
	<insert id="insertPointUsage" parameterType="map">
	    INSERT INTO POINT_USAGE (
	        USAGE_NO,
	        USED_AMOUNT,
	        USAGE_TYPE,
	        USAGE_TYPE_NO,
	        STATUS,
	        USED_DATE,
	        MEMBER_NO
	    ) VALUES (
	        SEQ_USAGE_NO.NEXTVAL,
	        #{usedAmount},
	        #{usageType},
	        #{usageTypeNo},
	        #{status},
	        SYSDATE,
	        #{memberNo}
	    )
	</insert>
	
	<!-- 현재 포인트 조회 -->
	<select id="selectMemberPoint" parameterType="int" resultType="int">
	    SELECT POINT
	    FROM MEMBER
	    WHERE MEMBER_NO = #{memberNo}
	</select>
	
	<!-- 참가 취소 -->
	<delete id="deleteRecruitmentParticipant" parameterType="map">
	    DELETE FROM RECRUITMENT_PARTICIPANT
	    WHERE MEMBER_NO = #{memberNo}
	      AND RECRUITMENT_NO = #{recruitmentNo}
	</delete>
	
	<!-- 모집글 삭제 -->
	<update id="updateBoardDelFl" parameterType="int">
	    UPDATE BOARD
	    SET BOARD_DEL_FL = 'Y'
	    WHERE BOARD_NO = #{boardNo}
	</update>
	
	<update id="updateRecruitmentStatus2" parameterType="int">
	    UPDATE RECRUITMENT_ROOM
	    SET RECRUITMENT_STATUS = '마감'
	    WHERE RECRUITMENT_NO = #{recruitmentNo}
	</update>
	
	<!-- 모집 인증 폼 -->
	<update id="updateVerificationFormWithQr" parameterType="map">
	    UPDATE RECRUITMENT_ROOM
	    SET 
	        TRACKING_NUMBER = #{trackingNumber},
	        DELIVERY_EXPECTED = TO_DATE(#{deliveryExpected}, 'YYYY-MM-DD'),
	        MEMBER_RECEIVE_DATE = TO_DATE(#{memberReceiveDate}, 'YYYY-MM-DD'),
	        QR_TOKEN = #{qrToken},
	        QR_IMAGE_PATH = #{qrImagePath}
	    WHERE RECRUITMENT_NO = #{recruitmentNo}
	</update>
	
	<update id="updateVerificationForm" parameterType="map">
	    UPDATE RECRUITMENT_ROOM
	    SET 
	        TRACKING_NUMBER = #{trackingNumber},
	        DELIVERY_EXPECTED = TO_DATE(#{deliveryExpected}, 'YYYY-MM-DD'),
	        MEMBER_RECEIVE_DATE = TO_DATE(#{memberReceiveDate}, 'YYYY-MM-DD')
	    WHERE RECRUITMENT_NO = #{recruitmentNo}
	</update>
	
	<!-- 토큰 유효성 검사 -->
    <select id="checkTokenValid" resultType="int">
        SELECT COUNT(*)
        FROM RECRUITMENT_ROOM
        WHERE RECRUITMENT_NO = #{recruitmentNo}
          AND QR_TOKEN = #{token}
    </select>

    <!-- 인증 상태 업데이트 -->
    <update id="updateCertStatus">
        UPDATE RECRUITMENT_PARTICIPANT
        SET CERT_STATUS = 'Y'
        WHERE RECRUITMENT_NO = #{recruitmentNo}
          AND MEMBER_NO IN (
            SELECT MEMBER_NO
            FROM RECRUITMENT_ROOM
            WHERE RECRUITMENT_NO = #{recruitmentNo}
              AND QR_TOKEN = #{token}
          )
    </update>
</mapper>
